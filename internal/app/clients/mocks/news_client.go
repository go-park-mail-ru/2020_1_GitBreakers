// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/news_client.go

// Package mock_interfaces is a generated GoMock package.
package mockClients

import (
	models "github.com/go-park-mail-ru/2020_1_GitBreakers/internal/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockNewsClientI is a mock of NewsClientI interface
type MockNewsClientI struct {
	ctrl     *gomock.Controller
	recorder *MockNewsClientIMockRecorder
}

// MockNewsClientIMockRecorder is the mock recorder for MockNewsClientI
type MockNewsClientIMockRecorder struct {
	mock *MockNewsClientI
}

// NewMockNewsClientI creates a new mock instance
func NewMockNewsClientI(ctrl *gomock.Controller) *MockNewsClientI {
	mock := &MockNewsClientI{ctrl: ctrl}
	mock.recorder = &MockNewsClientIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNewsClientI) EXPECT() *MockNewsClientIMockRecorder {
	return m.recorder
}

// GetNews mocks base method
func (m *MockNewsClientI) GetNews(repoID, userID, limit, offset int64) (models.NewsSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNews", repoID, userID, limit, offset)
	ret0, _ := ret[0].(models.NewsSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNews indicates an expected call of GetNews
func (mr *MockNewsClientIMockRecorder) GetNews(repoID, userID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNews", reflect.TypeOf((*MockNewsClientI)(nil).GetNews), repoID, userID, limit, offset)
}
