// Code generated by MockGen. DO NOT EDIT.
// Source: user_client.go

// Package mock_interfaces is a generated GoMock package.
package mockClients

import (
	models "github.com/go-park-mail-ru/2020_1_GitBreakers/internal/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserClientI is a mock of UserClientI interface
type MockUserClientI struct {
	ctrl     *gomock.Controller
	recorder *MockUserClientIMockRecorder
}

// MockUserClientIMockRecorder is the mock recorder for MockUserClientI
type MockUserClientIMockRecorder struct {
	mock *MockUserClientI
}

// NewMockUserClientI creates a new mock instance
func NewMockUserClientI(ctrl *gomock.Controller) *MockUserClientI {
	mock := &MockUserClientI{ctrl: ctrl}
	mock.recorder = &MockUserClientIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserClientI) EXPECT() *MockUserClientIMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockUserClientI) Create(User models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", User)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockUserClientIMockRecorder) Create(User interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserClientI)(nil).Create), User)
}

// Update mocks base method
func (m *MockUserClientI) Update(userID int64, newUserData models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userID, newUserData)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockUserClientIMockRecorder) Update(userID, newUserData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserClientI)(nil).Update), userID, newUserData)
}

// GetByLogin mocks base method
func (m *MockUserClientI) GetByLogin(login string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLogin", login)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLogin indicates an expected call of GetByLogin
func (mr *MockUserClientIMockRecorder) GetByLogin(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLogin", reflect.TypeOf((*MockUserClientI)(nil).GetByLogin), login)
}

// GetByID mocks base method
func (m *MockUserClientI) GetByID(userID int64) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", userID)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockUserClientIMockRecorder) GetByID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserClientI)(nil).GetByID), userID)
}

// CheckPass mocks base method
func (m *MockUserClientI) CheckPass(login, pass string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPass", login, pass)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPass indicates an expected call of CheckPass
func (mr *MockUserClientIMockRecorder) CheckPass(login, pass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPass", reflect.TypeOf((*MockUserClientI)(nil).CheckPass), login, pass)
}

// UploadAvatar mocks base method
func (m *MockUserClientI) UploadAvatar(UserID int64, fileName string, fileData []byte, fileSize int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadAvatar", UserID, fileName, fileData, fileSize)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadAvatar indicates an expected call of UploadAvatar
func (mr *MockUserClientIMockRecorder) UploadAvatar(UserID, fileName, fileData, fileSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAvatar", reflect.TypeOf((*MockUserClientI)(nil).UploadAvatar), UserID, fileName, fileData, fileSize)
}
