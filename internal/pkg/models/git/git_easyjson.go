// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package git

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson97a49f66DecodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit(in *jlexer.Lexer, out *Repository) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "owner_id":
			out.OwnerID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "is_fork":
			out.IsFork = bool(in.Bool())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "is_public":
			out.IsPublic = bool(in.Bool())
		case "stars":
			out.Stars = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson97a49f66EncodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit(out *jwriter.Writer, in Repository) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"owner_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.OwnerID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"is_fork\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsFork))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"is_public\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPublic))
	}
	{
		const prefix string = ",\"stars\":"
		out.RawString(prefix)
		out.Int64(int64(in.Stars))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Repository) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson97a49f66EncodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Repository) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson97a49f66EncodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Repository) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson97a49f66DecodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Repository) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson97a49f66DecodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit(l, v)
}
func easyjson97a49f66DecodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit1(in *jlexer.Lexer, out *FilesCommitRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_name":
			out.UserName = string(in.String())
		case "reponame":
			out.Reponame = string(in.String())
		case "hash_commits":
			out.HashCommits = string(in.String())
		case "Path":
			out.Path = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson97a49f66EncodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit1(out *jwriter.Writer, in FilesCommitRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.UserName))
	}
	{
		const prefix string = ",\"reponame\":"
		out.RawString(prefix)
		out.String(string(in.Reponame))
	}
	{
		const prefix string = ",\"hash_commits\":"
		out.RawString(prefix)
		out.String(string(in.HashCommits))
	}
	{
		const prefix string = ",\"Path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FilesCommitRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson97a49f66EncodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FilesCommitRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson97a49f66EncodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FilesCommitRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson97a49f66DecodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FilesCommitRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson97a49f66DecodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit1(l, v)
}
func easyjson97a49f66DecodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit2(in *jlexer.Lexer, out *FileInCommit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "file_type":
			out.FileType = string(in.String())
		case "file_mode":
			out.FileMode = string(in.String())
		case "file_size":
			out.FileSize = int64(in.Int64())
		case "is_binary":
			out.IsBinary = bool(in.Bool())
		case "content_type":
			out.ContentType = string(in.String())
		case "entry_hash":
			out.EntryHash = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson97a49f66EncodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit2(out *jwriter.Writer, in FileInCommit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"file_type\":"
		out.RawString(prefix)
		out.String(string(in.FileType))
	}
	{
		const prefix string = ",\"file_mode\":"
		out.RawString(prefix)
		out.String(string(in.FileMode))
	}
	{
		const prefix string = ",\"file_size\":"
		out.RawString(prefix)
		out.Int64(int64(in.FileSize))
	}
	{
		const prefix string = ",\"is_binary\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsBinary))
	}
	{
		const prefix string = ",\"content_type\":"
		out.RawString(prefix)
		out.String(string(in.ContentType))
	}
	{
		const prefix string = ",\"entry_hash\":"
		out.RawString(prefix)
		out.String(string(in.EntryHash))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FileInCommit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson97a49f66EncodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FileInCommit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson97a49f66EncodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FileInCommit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson97a49f66DecodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FileInCommit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson97a49f66DecodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit2(l, v)
}
func easyjson97a49f66DecodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit3(in *jlexer.Lexer, out *FileCommitted) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "file_info":
			(out.FileInfo).UnmarshalEasyJSON(in)
		case "content":
			out.Content = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson97a49f66EncodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit3(out *jwriter.Writer, in FileCommitted) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"file_info\":"
		out.RawString(prefix[1:])
		(in.FileInfo).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FileCommitted) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson97a49f66EncodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FileCommitted) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson97a49f66EncodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FileCommitted) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson97a49f66DecodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FileCommitted) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson97a49f66DecodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit3(l, v)
}
func easyjson97a49f66DecodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit4(in *jlexer.Lexer, out *CommitRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_login":
			out.UserLogin = string(in.String())
		case "repo_name":
			out.RepoName = string(in.String())
		case "commit_hash":
			out.CommitHash = string(in.String())
		case "offset":
			out.Offset = int64(in.Int64())
		case "limit":
			out.Limit = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson97a49f66EncodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit4(out *jwriter.Writer, in CommitRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_login\":"
		out.RawString(prefix[1:])
		out.String(string(in.UserLogin))
	}
	{
		const prefix string = ",\"repo_name\":"
		out.RawString(prefix)
		out.String(string(in.RepoName))
	}
	{
		const prefix string = ",\"commit_hash\":"
		out.RawString(prefix)
		out.String(string(in.CommitHash))
	}
	{
		const prefix string = ",\"offset\":"
		out.RawString(prefix)
		out.Int64(int64(in.Offset))
	}
	{
		const prefix string = ",\"limit\":"
		out.RawString(prefix)
		out.Int64(int64(in.Limit))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommitRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson97a49f66EncodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommitRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson97a49f66EncodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommitRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson97a49f66DecodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommitRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson97a49f66DecodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit4(l, v)
}
func easyjson97a49f66DecodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit5(in *jlexer.Lexer, out *Commit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "commit_hash":
			out.CommitHash = string(in.String())
		case "commit_author_name":
			out.CommitAuthorName = string(in.String())
		case "commit_author_email":
			out.CommitAuthorEmail = string(in.String())
		case "commit_author_when":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CommitAuthorWhen).UnmarshalJSON(data))
			}
		case "committer_name":
			out.CommitterName = string(in.String())
		case "committer_email":
			out.CommitterEmail = string(in.String())
		case "committer_when":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CommitterWhen).UnmarshalJSON(data))
			}
		case "tree_hash":
			out.TreeHash = string(in.String())
		case "commit_parents":
			if in.IsNull() {
				in.Skip()
				out.CommitParents = nil
			} else {
				in.Delim('[')
				if out.CommitParents == nil {
					if !in.IsDelim(']') {
						out.CommitParents = make([]string, 0, 4)
					} else {
						out.CommitParents = []string{}
					}
				} else {
					out.CommitParents = (out.CommitParents)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.CommitParents = append(out.CommitParents, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson97a49f66EncodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit5(out *jwriter.Writer, in Commit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"commit_hash\":"
		out.RawString(prefix[1:])
		out.String(string(in.CommitHash))
	}
	{
		const prefix string = ",\"commit_author_name\":"
		out.RawString(prefix)
		out.String(string(in.CommitAuthorName))
	}
	{
		const prefix string = ",\"commit_author_email\":"
		out.RawString(prefix)
		out.String(string(in.CommitAuthorEmail))
	}
	{
		const prefix string = ",\"commit_author_when\":"
		out.RawString(prefix)
		out.Raw((in.CommitAuthorWhen).MarshalJSON())
	}
	{
		const prefix string = ",\"committer_name\":"
		out.RawString(prefix)
		out.String(string(in.CommitterName))
	}
	{
		const prefix string = ",\"committer_email\":"
		out.RawString(prefix)
		out.String(string(in.CommitterEmail))
	}
	{
		const prefix string = ",\"committer_when\":"
		out.RawString(prefix)
		out.Raw((in.CommitterWhen).MarshalJSON())
	}
	{
		const prefix string = ",\"tree_hash\":"
		out.RawString(prefix)
		out.String(string(in.TreeHash))
	}
	{
		const prefix string = ",\"commit_parents\":"
		out.RawString(prefix)
		if in.CommitParents == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.CommitParents {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Commit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson97a49f66EncodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Commit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson97a49f66EncodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Commit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson97a49f66DecodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Commit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson97a49f66DecodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit5(l, v)
}
func easyjson97a49f66DecodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit6(in *jlexer.Lexer, out *Branch) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "commit":
			(out.Commit).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson97a49f66EncodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit6(out *jwriter.Writer, in Branch) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"commit\":"
		out.RawString(prefix)
		(in.Commit).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Branch) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson97a49f66EncodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Branch) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson97a49f66EncodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Branch) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson97a49f66DecodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Branch) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson97a49f66DecodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit6(l, v)
}
