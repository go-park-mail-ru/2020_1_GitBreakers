// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package git

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson83bb78b4DecodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit(in *jlexer.Lexer, out *FilesCommitRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_name":
			out.UserName = string(in.String())
		case "reponame":
			out.Reponame = string(in.String())
		case "hash_commits":
			out.HashCommits = string(in.String())
		case "Path":
			out.Path = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83bb78b4EncodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit(out *jwriter.Writer, in FilesCommitRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.UserName))
	}
	{
		const prefix string = ",\"reponame\":"
		out.RawString(prefix)
		out.String(string(in.Reponame))
	}
	{
		const prefix string = ",\"hash_commits\":"
		out.RawString(prefix)
		out.String(string(in.HashCommits))
	}
	{
		const prefix string = ",\"Path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FilesCommitRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson83bb78b4EncodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FilesCommitRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson83bb78b4EncodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FilesCommitRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson83bb78b4DecodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FilesCommitRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson83bb78b4DecodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit(l, v)
}
func easyjson83bb78b4DecodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit1(in *jlexer.Lexer, out *FileInCommitSet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(FileInCommitSet, 0, 1)
			} else {
				*out = FileInCommitSet{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 FileInCommit
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83bb78b4EncodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit1(out *jwriter.Writer, in FileInCommitSet) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v FileInCommitSet) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson83bb78b4EncodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FileInCommitSet) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson83bb78b4EncodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FileInCommitSet) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson83bb78b4DecodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FileInCommitSet) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson83bb78b4DecodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit1(l, v)
}
func easyjson83bb78b4DecodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit2(in *jlexer.Lexer, out *FileInCommit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "file_type":
			out.FileType = string(in.String())
		case "file_mode":
			out.FileMode = string(in.String())
		case "file_size":
			out.FileSize = int64(in.Int64())
		case "is_binary":
			out.IsBinary = bool(in.Bool())
		case "content_type":
			out.ContentType = string(in.String())
		case "entry_hash":
			out.EntryHash = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83bb78b4EncodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit2(out *jwriter.Writer, in FileInCommit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"file_type\":"
		out.RawString(prefix)
		out.String(string(in.FileType))
	}
	{
		const prefix string = ",\"file_mode\":"
		out.RawString(prefix)
		out.String(string(in.FileMode))
	}
	{
		const prefix string = ",\"file_size\":"
		out.RawString(prefix)
		out.Int64(int64(in.FileSize))
	}
	{
		const prefix string = ",\"is_binary\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsBinary))
	}
	{
		const prefix string = ",\"content_type\":"
		out.RawString(prefix)
		out.String(string(in.ContentType))
	}
	{
		const prefix string = ",\"entry_hash\":"
		out.RawString(prefix)
		out.String(string(in.EntryHash))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FileInCommit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson83bb78b4EncodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FileInCommit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson83bb78b4EncodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FileInCommit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson83bb78b4DecodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FileInCommit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson83bb78b4DecodeGithubComGoParkMailRu20201GitBreakersInternalPkgModelsGit2(l, v)
}
