// Code generated by MockGen. DO NOT EDIT.
// Source: repo_issues.go

// Package mock_session is a generated GoMock package.
package mocks

import (
	models "github.com/go-park-mail-ru/2020_1_GitBreakers/internal/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockSessRepo is a mock of SessRepo interface
type MockSessRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSessRepoMockRecorder
}

// MockSessRepoMockRecorder is the mock recorder for MockSessRepo
type MockSessRepoMockRecorder struct {
	mock *MockSessRepo
}

// NewMockSessRepo creates a new mock instance
func NewMockSessRepo(ctrl *gomock.Controller) *MockSessRepo {
	mock := &MockSessRepo{ctrl: ctrl}
	mock.recorder = &MockSessRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessRepo) EXPECT() *MockSessRepoMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockSessRepo) Create(session models.Session, expire time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", session, expire)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockSessRepoMockRecorder) Create(session, expire interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSessRepo)(nil).Create), session, expire)
}

// GetSessByID mocks base method
func (m *MockSessRepo) GetSessByID(sessionID string) (models.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessByID", sessionID)
	ret0, _ := ret[0].(models.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessByID indicates an expected call of GetSessByID
func (mr *MockSessRepoMockRecorder) GetSessByID(sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessByID", reflect.TypeOf((*MockSessRepo)(nil).GetSessByID), sessionID)
}

// DeleteByID mocks base method
func (m *MockSessRepo) DeleteByID(sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID
func (mr *MockSessRepoMockRecorder) DeleteByID(sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockSessRepo)(nil).DeleteByID), sessionID)
}
