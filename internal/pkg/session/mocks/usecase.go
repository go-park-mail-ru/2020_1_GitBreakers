// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_session is a generated GoMock package.
package mocks

import (
	models "github.com/go-park-mail-ru/2020_1_GitBreakers/internal/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockUCSession is a mock of UCSession interface
type MockUCSession struct {
	ctrl     *gomock.Controller
	recorder *MockUCSessionMockRecorder
}

// MockUCSessionMockRecorder is the mock recorder for MockUCSession
type MockUCSessionMockRecorder struct {
	mock *MockUCSession
}

// NewMockUCSession creates a new mock instance
func NewMockUCSession(ctrl *gomock.Controller) *MockUCSession {
	mock := &MockUCSession{ctrl: ctrl}
	mock.recorder = &MockUCSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUCSession) EXPECT() *MockUCSessionMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockUCSession) Create(session models.Session, expire time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", session, expire)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockUCSessionMockRecorder) Create(session, expire interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUCSession)(nil).Create), session, expire)
}

// Delete mocks base method
func (m *MockUCSession) Delete(sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockUCSessionMockRecorder) Delete(sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUCSession)(nil).Delete), sessionID)
}

// GetByID mocks base method
func (m *MockUCSession) GetByID(sessionID string) (models.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", sessionID)
	ret0, _ := ret[0].(models.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockUCSessionMockRecorder) GetByID(sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUCSession)(nil).GetByID), sessionID)
}
