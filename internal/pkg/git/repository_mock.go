// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_git is a generated GoMock package.
package git

import (
	git "github.com/go-park-mail-ru/2020_1_GitBreakers/internal/pkg/models/git"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetById mocks base method
func (m *MockRepository) GetById(id int) (git.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(git.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById
func (mr *MockRepositoryMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockRepository)(nil).GetById), id)
}

// GetByName mocks base method
func (m *MockRepository) GetByName(userLogin, repoName string) (git.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", userLogin, repoName)
	ret0, _ := ret[0].(git.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName
func (mr *MockRepositoryMockRecorder) GetByName(userLogin, repoName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockRepository)(nil).GetByName), userLogin, repoName)
}

// Create mocks base method
func (m *MockRepository) Create(repos git.Repository) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", repos)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockRepositoryMockRecorder) Create(repos interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), repos)
}

// CheckReadAccess mocks base method
func (m *MockRepository) CheckReadAccess(currentUserId *int, userLogin, repoName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckReadAccess", currentUserId, userLogin, repoName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckReadAccess indicates an expected call of CheckReadAccess
func (mr *MockRepositoryMockRecorder) CheckReadAccess(currentUserId, userLogin, repoName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckReadAccess", reflect.TypeOf((*MockRepository)(nil).CheckReadAccess), currentUserId, userLogin, repoName)
}

// GetBranchesByName mocks base method
func (m *MockRepository) GetBranchesByName(userLogin, repoName string) ([]git.Branch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranchesByName", userLogin, repoName)
	ret0, _ := ret[0].([]git.Branch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranchesByName indicates an expected call of GetBranchesByName
func (mr *MockRepositoryMockRecorder) GetBranchesByName(userLogin, repoName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranchesByName", reflect.TypeOf((*MockRepository)(nil).GetBranchesByName), userLogin, repoName)
}

// GetAnyReposByUserLogin mocks base method
func (m *MockRepository) GetAnyReposByUserLogin(userLogin string, offset, limit int) ([]git.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnyReposByUserLogin", userLogin, offset, limit)
	ret0, _ := ret[0].([]git.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnyReposByUserLogin indicates an expected call of GetAnyReposByUserLogin
func (mr *MockRepositoryMockRecorder) GetAnyReposByUserLogin(userLogin, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnyReposByUserLogin", reflect.TypeOf((*MockRepository)(nil).GetAnyReposByUserLogin), userLogin, offset, limit)
}

// GetReposByUserLogin mocks base method
func (m *MockRepository) GetReposByUserLogin(requesterId *int, userLogin string, offset, limit int) ([]git.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReposByUserLogin", requesterId, userLogin, offset, limit)
	ret0, _ := ret[0].([]git.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReposByUserLogin indicates an expected call of GetReposByUserLogin
func (mr *MockRepositoryMockRecorder) GetReposByUserLogin(requesterId, userLogin, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReposByUserLogin", reflect.TypeOf((*MockRepository)(nil).GetReposByUserLogin), requesterId, userLogin, offset, limit)
}

// FilesInCommitByPath mocks base method
func (m *MockRepository) FilesInCommitByPath(userLogin, repoName, commitHash, path string) ([]git.FileInCommit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilesInCommitByPath", userLogin, repoName, commitHash, path)
	ret0, _ := ret[0].([]git.FileInCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilesInCommitByPath indicates an expected call of FilesInCommitByPath
func (mr *MockRepositoryMockRecorder) FilesInCommitByPath(userLogin, repoName, commitHash, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilesInCommitByPath", reflect.TypeOf((*MockRepository)(nil).FilesInCommitByPath), userLogin, repoName, commitHash, path)
}

// GetFileByPath mocks base method
func (m *MockRepository) GetFileByPath(userLogin, repoName, commitHash, path string) (git.FileCommitted, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileByPath", userLogin, repoName, commitHash, path)
	ret0, _ := ret[0].(git.FileCommitted)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileByPath indicates an expected call of GetFileByPath
func (mr *MockRepositoryMockRecorder) GetFileByPath(userLogin, repoName, commitHash, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileByPath", reflect.TypeOf((*MockRepository)(nil).GetFileByPath), userLogin, repoName, commitHash, path)
}

// GetCommitsByCommitHash mocks base method
func (m *MockRepository) GetCommitsByCommitHash(userLogin, repoName, commitHash string, offset, limit int) ([]git.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitsByCommitHash", userLogin, repoName, commitHash, offset, limit)
	ret0, _ := ret[0].([]git.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitsByCommitHash indicates an expected call of GetCommitsByCommitHash
func (mr *MockRepositoryMockRecorder) GetCommitsByCommitHash(userLogin, repoName, commitHash, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitsByCommitHash", reflect.TypeOf((*MockRepository)(nil).GetCommitsByCommitHash), userLogin, repoName, commitHash, offset, limit)
}

// GetCommitsByBranchName mocks base method
func (m *MockRepository) GetCommitsByBranchName(userLogin, repoName, branchName string, offset, limit int) ([]git.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitsByBranchName", userLogin, repoName, branchName, offset, limit)
	ret0, _ := ret[0].([]git.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitsByBranchName indicates an expected call of GetCommitsByBranchName
func (mr *MockRepositoryMockRecorder) GetCommitsByBranchName(userLogin, repoName, branchName, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitsByBranchName", reflect.TypeOf((*MockRepository)(nil).GetCommitsByBranchName), userLogin, repoName, branchName, offset, limit)
}
