// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_user is a generated GoMock package.
package mocks

import (
	models "github.com/go-park-mail-ru/2020_1_GitBreakers/internal/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepoUser is a mock of RepoUser interface
type MockRepoUser struct {
	ctrl     *gomock.Controller
	recorder *MockRepoUserMockRecorder
}

// MockRepoUserMockRecorder is the mock recorder for MockRepoUser
type MockRepoUserMockRecorder struct {
	mock *MockRepoUser
}

// NewMockRepoUser creates a new mock instance
func NewMockRepoUser(ctrl *gomock.Controller) *MockRepoUser {
	mock := &MockRepoUser{ctrl: ctrl}
	mock.recorder = &MockRepoUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepoUser) EXPECT() *MockRepoUserMockRecorder {
	return m.recorder
}

// GetUserByIDWithPass mocks base method
func (m *MockRepoUser) GetUserByIDWithPass(id int) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByIDWithPass", id)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByIDWithPass indicates an expected call of GetUserByIDWithPass
func (mr *MockRepoUserMockRecorder) GetUserByIdWithPass(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByIDWithPass", reflect.TypeOf((*MockRepoUser)(nil).GetUserByIDWithPass), id)
}

// GetUserByIDWithoutPass mocks base method
func (m *MockRepoUser) GetUserByIDWithoutPass(id int) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByIDWithoutPass", id)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByIDWithoutPass indicates an expected call of GetUserByIDWithoutPass
func (mr *MockRepoUserMockRecorder) GetUserByIdWithoutPass(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByIDWithoutPass", reflect.TypeOf((*MockRepoUser)(nil).GetUserByIDWithoutPass), id)
}

// GetUserByLoginWithPass mocks base method
func (m *MockRepoUser) GetUserByLoginWithPass(login string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByLoginWithPass", login)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLoginWithPass indicates an expected call of GetUserByLoginWithPass
func (mr *MockRepoUserMockRecorder) GetUserByLoginWithPass(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLoginWithPass", reflect.TypeOf((*MockRepoUser)(nil).GetUserByLoginWithPass), login)
}

// GetByLoginWithoutPass mocks base method
func (m *MockRepoUser) GetByLoginWithoutPass(login string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLoginWithoutPass", login)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLoginWithoutPass indicates an expected call of GetByLoginWithoutPass
func (mr *MockRepoUserMockRecorder) GetByLoginWithoutPass(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLoginWithoutPass", reflect.TypeOf((*MockRepoUser)(nil).GetByLoginWithoutPass), login)
}

// GetLoginByID mocks base method
func (m *MockRepoUser) GetLoginByID(id int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoginByID", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoginByID indicates an expected call of GetLoginByID
func (mr *MockRepoUserMockRecorder) GetLoginById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoginByID", reflect.TypeOf((*MockRepoUser)(nil).GetLoginByID), id)
}

// GetIDByLogin mocks base method
func (m *MockRepoUser) GetIDByLogin(login string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDByLogin", login)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDByLogin indicates an expected call of GetIDByLogin
func (mr *MockRepoUserMockRecorder) GetIdByLogin(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDByLogin", reflect.TypeOf((*MockRepoUser)(nil).GetIDByLogin), login)
}

// Create mocks base method
func (m *MockRepoUser) Create(newUser models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", newUser)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockRepoUserMockRecorder) Create(newUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepoUser)(nil).Create), newUser)
}

// Update mocks base method
func (m *MockRepoUser) Update(usrUpd models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", usrUpd)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockRepoUserMockRecorder) Update(usrUpd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepoUser)(nil).Update), usrUpd)
}

// IsExists mocks base method
func (m *MockRepoUser) IsExists(user models.User) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExists", user)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExists indicates an expected call of IsExists
func (mr *MockRepoUserMockRecorder) IsExists(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExists", reflect.TypeOf((*MockRepoUser)(nil).IsExists), user)
}

// DeleteByID mocks base method
func (m *MockRepoUser) DeleteByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID
func (mr *MockRepoUserMockRecorder) DeleteById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockRepoUser)(nil).DeleteByID), id)
}

// CheckPass mocks base method
func (m *MockRepoUser) CheckPass(login, newpass string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPass", login, newpass)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPass indicates an expected call of CheckPass
func (mr *MockRepoUserMockRecorder) CheckPass(login, newpass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPass", reflect.TypeOf((*MockRepoUser)(nil).CheckPass), login, newpass)
}

// UploadAvatar mocks base method
func (m *MockRepoUser) UploadAvatar(Name string, Content []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadAvatar", Name, Content)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadAvatar indicates an expected call of UploadAvatar
func (mr *MockRepoUserMockRecorder) UploadAvatar(Name, Content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAvatar", reflect.TypeOf((*MockRepoUser)(nil).UploadAvatar), Name, Content)
}

// UpdateAvatarPath mocks base method
func (m *MockRepoUser) UpdateAvatarPath(User models.User, Name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAvatarPath", User, Name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAvatarPath indicates an expected call of UpdateAvatarPath
func (mr *MockRepoUserMockRecorder) UpdateAvatarPath(User, Name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAvatarPath", reflect.TypeOf((*MockRepoUser)(nil).UpdateAvatarPath), User, Name)
}

// UserCanUpdate mocks base method
func (m *MockRepoUser) UserCanUpdate(user models.User) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCanUpdate", user)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserCanUpdate indicates an expected call of UserCanUpdate
func (mr *MockRepoUserMockRecorder) UserCanUpdate(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCanUpdate", reflect.TypeOf((*MockRepoUser)(nil).UserCanUpdate), user)
}
