// Code generated by MockGen. DO NOT EDIT.
// Source: repo_issues.go

// Package mock_codehub is a generated GoMock package.
package mock_codehub

import (
	models "github.com/go-park-mail-ru/2020_1_GitBreakers/internal/pkg/models"
	permission_types "github.com/go-park-mail-ru/2020_1_GitBreakers/pkg/permission_types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepoIssueI is a mock of RepoIssueI interface
type MockRepoIssueI struct {
	ctrl     *gomock.Controller
	recorder *MockRepoIssueIMockRecorder
}

// MockRepoIssueIMockRecorder is the mock recorder for MockRepoIssueI
type MockRepoIssueIMockRecorder struct {
	mock *MockRepoIssueI
}

// NewMockRepoIssueI creates a new mock instance
func NewMockRepoIssueI(ctrl *gomock.Controller) *MockRepoIssueI {
	mock := &MockRepoIssueI{ctrl: ctrl}
	mock.recorder = &MockRepoIssueIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepoIssueI) EXPECT() *MockRepoIssueIMockRecorder {
	return m.recorder
}

// CreateIssue mocks base method
func (m *MockRepoIssueI) CreateIssue(issue models.Issue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIssue", issue)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIssue indicates an expected call of CreateIssue
func (mr *MockRepoIssueIMockRecorder) CreateIssue(issue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIssue", reflect.TypeOf((*MockRepoIssueI)(nil).CreateIssue), issue)
}

// UpdateIssue mocks base method
func (m *MockRepoIssueI) UpdateIssue(issue models.Issue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIssue", issue)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIssue indicates an expected call of UpdateIssue
func (mr *MockRepoIssueIMockRecorder) UpdateIssue(issue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIssue", reflect.TypeOf((*MockRepoIssueI)(nil).UpdateIssue), issue)
}

// CloseIssue mocks base method
func (m *MockRepoIssueI) CloseIssue(issueID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseIssue", issueID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseIssue indicates an expected call of CloseIssue
func (mr *MockRepoIssueIMockRecorder) CloseIssue(issueID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseIssue", reflect.TypeOf((*MockRepoIssueI)(nil).CloseIssue), issueID)
}

// GetIssuesList mocks base method
func (m *MockRepoIssueI) GetIssuesList(repoID, limit, offset int64) ([]models.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuesList", repoID, limit, offset)
	ret0, _ := ret[0].([]models.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssuesList indicates an expected call of GetIssuesList
func (mr *MockRepoIssueIMockRecorder) GetIssuesList(repoID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuesList", reflect.TypeOf((*MockRepoIssueI)(nil).GetIssuesList), repoID, limit, offset)
}

// GetOpenedIssuesList mocks base method
func (m *MockRepoIssueI) GetOpenedIssuesList(repoID, limit, offset int64) ([]models.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenedIssuesList", repoID, limit, offset)
	ret0, _ := ret[0].([]models.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenedIssuesList indicates an expected call of GetOpenedIssuesList
func (mr *MockRepoIssueIMockRecorder) GetOpenedIssuesList(repoID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenedIssuesList", reflect.TypeOf((*MockRepoIssueI)(nil).GetOpenedIssuesList), repoID, limit, offset)
}

// GetClosedIssuesList mocks base method
func (m *MockRepoIssueI) GetClosedIssuesList(repoID, limit, offset int64) ([]models.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClosedIssuesList", repoID, limit, offset)
	ret0, _ := ret[0].([]models.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClosedIssuesList indicates an expected call of GetClosedIssuesList
func (mr *MockRepoIssueIMockRecorder) GetClosedIssuesList(repoID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClosedIssuesList", reflect.TypeOf((*MockRepoIssueI)(nil).GetClosedIssuesList), repoID, limit, offset)
}

// CheckEditAccessIssue mocks base method
func (m *MockRepoIssueI) CheckEditAccessIssue(userID, issueID int64) (permission_types.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckEditAccessIssue", userID, issueID)
	ret0, _ := ret[0].(permission_types.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckEditAccessIssue indicates an expected call of CheckEditAccessIssue
func (mr *MockRepoIssueIMockRecorder) CheckEditAccessIssue(userID, issueID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckEditAccessIssue", reflect.TypeOf((*MockRepoIssueI)(nil).CheckEditAccessIssue), userID, issueID)
}

// GetIssue mocks base method
func (m *MockRepoIssueI) GetIssue(issueID int64) (models.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssue", issueID)
	ret0, _ := ret[0].(models.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssue indicates an expected call of GetIssue
func (mr *MockRepoIssueIMockRecorder) GetIssue(issueID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssue", reflect.TypeOf((*MockRepoIssueI)(nil).GetIssue), issueID)
}
