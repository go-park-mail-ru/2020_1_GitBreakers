// Code generated by protoc-gen-go. DO NOT EDIT.
// source: news.proto

package news

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NewsReq struct {
	RepoID               int64    `protobuf:"varint,1,opt,name=repoID,proto3" json:"repoID,omitempty"`
	UserID               int64    `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`
	Limit                int64    `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset               int64    `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewsReq) Reset()         { *m = NewsReq{} }
func (m *NewsReq) String() string { return proto.CompactTextString(m) }
func (*NewsReq) ProtoMessage()    {}
func (*NewsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c0382e93bed6d84, []int{0}
}

func (m *NewsReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewsReq.Unmarshal(m, b)
}
func (m *NewsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewsReq.Marshal(b, m, deterministic)
}
func (m *NewsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewsReq.Merge(m, src)
}
func (m *NewsReq) XXX_Size() int {
	return xxx_messageInfo_NewsReq.Size(m)
}
func (m *NewsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NewsReq.DiscardUnknown(m)
}

var xxx_messageInfo_NewsReq proto.InternalMessageInfo

func (m *NewsReq) GetRepoID() int64 {
	if m != nil {
		return m.RepoID
	}
	return 0
}

func (m *NewsReq) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *NewsReq) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *NewsReq) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type NewsResp struct {
	News                 []*NewsModel `protobuf:"bytes,1,rep,name=News,proto3" json:"News,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *NewsResp) Reset()         { *m = NewsResp{} }
func (m *NewsResp) String() string { return proto.CompactTextString(m) }
func (*NewsResp) ProtoMessage()    {}
func (*NewsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c0382e93bed6d84, []int{1}
}

func (m *NewsResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewsResp.Unmarshal(m, b)
}
func (m *NewsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewsResp.Marshal(b, m, deterministic)
}
func (m *NewsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewsResp.Merge(m, src)
}
func (m *NewsResp) XXX_Size() int {
	return xxx_messageInfo_NewsResp.Size(m)
}
func (m *NewsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_NewsResp.DiscardUnknown(m)
}

var xxx_messageInfo_NewsResp proto.InternalMessageInfo

func (m *NewsResp) GetNews() []*NewsModel {
	if m != nil {
		return m.News
	}
	return nil
}

type NewsModel struct {
	ID                   int64                `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	AuthorID             int64                `protobuf:"varint,2,opt,name=AuthorID,proto3" json:"AuthorID,omitempty"`
	Message              string               `protobuf:"bytes,3,opt,name=Message,proto3" json:"Message,omitempty"`
	RepoID               int64                `protobuf:"varint,4,opt,name=RepoID,proto3" json:"RepoID,omitempty"`
	Date                 *timestamp.Timestamp `protobuf:"bytes,5,opt,name=Date,proto3" json:"Date,omitempty"`
	AuthorLogin          string               `protobuf:"bytes,6,opt,name=AuthorLogin,proto3" json:"AuthorLogin,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *NewsModel) Reset()         { *m = NewsModel{} }
func (m *NewsModel) String() string { return proto.CompactTextString(m) }
func (*NewsModel) ProtoMessage()    {}
func (*NewsModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c0382e93bed6d84, []int{2}
}

func (m *NewsModel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewsModel.Unmarshal(m, b)
}
func (m *NewsModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewsModel.Marshal(b, m, deterministic)
}
func (m *NewsModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewsModel.Merge(m, src)
}
func (m *NewsModel) XXX_Size() int {
	return xxx_messageInfo_NewsModel.Size(m)
}
func (m *NewsModel) XXX_DiscardUnknown() {
	xxx_messageInfo_NewsModel.DiscardUnknown(m)
}

var xxx_messageInfo_NewsModel proto.InternalMessageInfo

func (m *NewsModel) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *NewsModel) GetAuthorID() int64 {
	if m != nil {
		return m.AuthorID
	}
	return 0
}

func (m *NewsModel) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *NewsModel) GetRepoID() int64 {
	if m != nil {
		return m.RepoID
	}
	return 0
}

func (m *NewsModel) GetDate() *timestamp.Timestamp {
	if m != nil {
		return m.Date
	}
	return nil
}

func (m *NewsModel) GetAuthorLogin() string {
	if m != nil {
		return m.AuthorLogin
	}
	return ""
}

func init() {
	proto.RegisterType((*NewsReq)(nil), "news.NewsReq")
	proto.RegisterType((*NewsResp)(nil), "news.NewsResp")
	proto.RegisterType((*NewsModel)(nil), "news.NewsModel")
}

func init() {
	proto.RegisterFile("news.proto", fileDescriptor_2c0382e93bed6d84)
}

var fileDescriptor_2c0382e93bed6d84 = []byte{
	// 290 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x4c, 0x90, 0xc1, 0x4b, 0xc3, 0x30,
	0x18, 0xc5, 0xdd, 0xda, 0x75, 0xdb, 0x37, 0x9c, 0x10, 0x44, 0x42, 0x2f, 0x8e, 0x0a, 0xb2, 0x53,
	0x06, 0xf5, 0xe8, 0x49, 0x19, 0x88, 0xe0, 0x3c, 0x04, 0x4f, 0xde, 0x3a, 0xfc, 0x5a, 0x0b, 0xed,
	0x52, 0x9b, 0x14, 0xff, 0x38, 0xff, 0x39, 0x93, 0x7c, 0x6b, 0xb7, 0x5b, 0xde, 0x2f, 0x0f, 0xde,
	0xfb, 0x1e, 0xc0, 0x01, 0x7f, 0xb5, 0x68, 0x5a, 0x65, 0x14, 0x0b, 0xdd, 0x3b, 0xbe, 0x2d, 0x94,
	0x2a, 0x2a, 0xdc, 0x78, 0xb6, 0xef, 0xf2, 0x8d, 0x29, 0x6b, 0xd4, 0x26, 0xab, 0x1b, 0xb2, 0x25,
	0x05, 0x4c, 0xdf, 0xad, 0x51, 0xe2, 0x0f, 0xbb, 0x81, 0xa8, 0xc5, 0x46, 0xbd, 0x6e, 0xf9, 0x68,
	0x35, 0x5a, 0x07, 0xf2, 0xa8, 0x1c, 0xef, 0x34, 0xb6, 0x96, 0x8f, 0x89, 0x93, 0x62, 0xd7, 0x30,
	0xa9, 0xca, 0xba, 0x34, 0x3c, 0xf0, 0x98, 0x84, 0x73, 0xab, 0x3c, 0xd7, 0x68, 0x78, 0x48, 0x6e,
	0x52, 0xc9, 0x06, 0x66, 0x14, 0xa4, 0x1b, 0x76, 0x07, 0xa1, 0x7b, 0xdb, 0x9c, 0x60, 0xbd, 0x48,
	0xaf, 0x84, 0xaf, 0xed, 0xc8, 0x4e, 0x7d, 0x61, 0x25, 0xfd, 0x67, 0xf2, 0x37, 0x82, 0xf9, 0xc0,
	0xd8, 0x12, 0xc6, 0x43, 0x31, 0xfb, 0x62, 0x31, 0xcc, 0x9e, 0x3a, 0xf3, 0xad, 0x4e, 0xb5, 0x06,
	0xcd, 0x38, 0x4c, 0x77, 0xa8, 0x75, 0x56, 0xa0, 0xaf, 0x36, 0x97, 0xbd, 0x74, 0xe5, 0x24, 0x9d,
	0x78, 0x2c, 0x47, 0x8a, 0x09, 0x08, 0xb7, 0x99, 0x41, 0x3e, 0xb1, 0x74, 0x91, 0xc6, 0x82, 0x56,
	0x13, 0xfd, 0x6a, 0xe2, 0xa3, 0x5f, 0x4d, 0x7a, 0x1f, 0x5b, 0xc1, 0x82, 0xd2, 0xde, 0x54, 0x51,
	0x1e, 0x78, 0xe4, 0x53, 0xce, 0x51, 0x2a, 0xe8, 0x44, 0x76, 0x0f, 0xc1, 0x0b, 0x1a, 0x76, 0x79,
	0xba, 0xd1, 0x4e, 0x1d, 0x2f, 0xcf, 0xa5, 0x6e, 0x92, 0x8b, 0xe7, 0xd9, 0x67, 0x24, 0x1e, 0x1d,
	0xdc, 0x47, 0x3e, 0xf5, 0xe1, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x9e, 0x06, 0x21, 0x7c, 0xcd, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NewsClient is the client API for News service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NewsClient interface {
	Get(ctx context.Context, in *NewsReq, opts ...grpc.CallOption) (*NewsResp, error)
}

type newsClient struct {
	cc grpc.ClientConnInterface
}

func NewNewsClient(cc grpc.ClientConnInterface) NewsClient {
	return &newsClient{cc}
}

func (c *newsClient) Get(ctx context.Context, in *NewsReq, opts ...grpc.CallOption) (*NewsResp, error) {
	out := new(NewsResp)
	err := c.cc.Invoke(ctx, "/news.News/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NewsServer is the server API for News service.
type NewsServer interface {
	Get(context.Context, *NewsReq) (*NewsResp, error)
}

// UnimplementedNewsServer can be embedded to have forward compatible implementations.
type UnimplementedNewsServer struct {
}

func (*UnimplementedNewsServer) Get(ctx context.Context, req *NewsReq) (*NewsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

func RegisterNewsServer(s *grpc.Server, srv NewsServer) {
	s.RegisterService(&_News_serviceDesc, srv)
}

func _News_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.News/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).Get(ctx, req.(*NewsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _News_serviceDesc = grpc.ServiceDesc{
	ServiceName: "news.News",
	HandlerType: (*NewsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _News_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "news.proto",
}
